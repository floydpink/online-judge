{"id":"225","type":"Easy","title":"Implement Stack using Queues","content":"\n              <p></p><p>\r\nImplement the following operations of a stack using queues.\r\n<ul>\r\n<li>\r\npush(x) -- Push element x onto stack.\r\n</li>\r\n<li>\r\npop() -- Removes the element on top of the stack.\r\n</li>\r\n<li>\r\ntop() -- Get the top element.\r\n</li>\r\n<li>\r\nempty() -- Return whether the stack is empty.\r\n</li>\r\n</ul>\r\n<b>Notes:</b><br>\r\n<ul>\r\n<li>You must use <i>only</i> standard operations of a queue -- which means only <code>push to back</code>, <code>peek/pop from front</code>, <code>size</code>, and <code>is empty</code> operations are valid.</li>\r\n<li>Depending on your language, queue may not be supported natively. You may simulate a queue by using a list or deque (double-ended queue), as long as you use only standard operations of a queue.</li>\r\n<li>You may assume that all operations are valid (for example, no pop or top operations will be called on an empty stack).</li>\r\n</ul>\r\n</p>\r\n\r\n<p>\r\n<b><font color=\"red\">Update (2015-06-11):</font></b><br>\r\nThe class name of the <b>Java</b> function had been updated to <b>MyStack</b> instead of Stack.\r\n</p>\r\n\r\n<p><b>Credits:</b><br>Special thanks to <a href=\"https://leetcode.com/discuss/user/jianchao.li.fighter\">@jianchao.li.fighter</a> for adding this problem and all test cases.</p><p></p>\n              \n                <div>\n                  <p><a href=\"/subscribe/\">Subscribe</a> to see which companies asked this question</p>\n                </div>\n              \n\n              \n                <div>\n                  <div id=\"tags\" class=\"btn btn-xs btn-warning\"></div>\n                  <span class=\"hidebutton\"></span>\n                </div>\n              \n\n              \n                <div>\n                  <div id=\"similar\" class=\"btn btn-xs btn-warning\"></div>\n                  <span class=\"hidebutton\"></span>\n                </div>\n              \n\n            "}