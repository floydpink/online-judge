{"id":"101","type":"Easy","title":"Symmetric Tree","content":"\n              <p></p><p>Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).</p>\r\n\r\n<p>\r\nFor example, this binary tree is symmetric:\r\n<pre>\r\n    1\r\n   / \\\r\n  2   2\r\n / \\ / \\\r\n3  4 4  3\r\n</pre>\r\n</p>\r\n<p>\r\nBut the following is not:<br>\r\n<pre>\r\n    1\r\n   / \\\r\n  2   2\r\n   \\   \\\r\n   3    3\r\n</pre>\r\n</p>\r\n\r\n<p>\r\n<b>Note:</b><br>\r\nBonus points if you could solve it both recursively and iteratively.\r\n</p>\r\n\r\n<p class=\"showspoilers\">confused what <code>&quot;{1,#,2,3}&quot;</code> means? <a href=\"#\" onclick=\"showSpoilers(this); return false;\">&gt; read more on how binary tree is serialized on OJ.</a></p>\r\n\r\n<div class=\"spoilers\"><br><b>OJ&apos;s Binary Tree Serialization:</b>\r\n<p>\r\nThe serialization of a binary tree follows a level order traversal, where &apos;#&apos; signifies a path terminator where no node exists below.\r\n</p>\r\n<p>\r\nHere&apos;s an example:<br>\r\n<pre>\r\n   1\r\n  / \\\r\n 2   3\r\n    /\r\n   4\r\n    \\\r\n     5\r\n</pre>\r\nThe above binary tree is serialized as <code>&quot;{1,2,3,#,#,4,#,#,5}&quot;</code>. \r\n</p>\r\n</div><p></p>\n              \n                <div>\n                  <p><a href=\"/subscribe/\">Subscribe</a> to see which companies asked this question</p>\n                </div>\n              \n\n              \n                <div>\n                  <div id=\"tags\" class=\"btn btn-xs btn-warning\"></div>\n                  <span class=\"hidebutton\"></span>\n                </div>\n              \n\n              \n\n            "}